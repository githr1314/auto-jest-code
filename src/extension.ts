import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import axios from 'axios';
import { containsPattern } from './utils';
import { DEFAULT_API_URL, IGNORE_PATTERNS, SUPPORTED_EXTENSIONS } from './config';

export function activate(context: vscode.ExtensionContext) {
  console.log('Jest Test Generator extension is now active!');

  let disposable = vscode.commands.registerCommand('extension.generateJestTests', async (uri: vscode.Uri) => {
    console.log('Generate Jest Tests command triggered for:', uri.fsPath);

    // 读取用户配置
    const config = vscode.workspace.getConfiguration('jestTestGenerator');
    let deepseekApiUrl = config.get<string>('deepseekApiUrl', '');
    let deepseekApiKey = config.get<string>('deepseekApiKey', '');

    // 如果未配置 API URL，弹出输入框让用户填写
    if (!deepseekApiUrl) {
      deepseekApiUrl = await vscode.window.showInputBox({
        prompt: 'Enter DeepSeek API URL',
        placeHolder: DEFAULT_API_URL,
        ignoreFocusOut: true,
      }) || '';

      if (!deepseekApiUrl) {
        vscode.window.showErrorMessage('DeepSeek API URL is required.');
        return;
      }

      // 保存用户输入的 API URL
      await config.update('deepseekApiUrl', deepseekApiUrl, vscode.ConfigurationTarget.Global);
    }

    // 如果未配置 API Key，弹出输入框让用户填写
    if (!deepseekApiKey) {
      deepseekApiKey = await vscode.window.showInputBox({
        prompt: 'Enter DeepSeek API Key',
        placeHolder: 'Your API Key',
        ignoreFocusOut: true,
      }) || '';

      if (!deepseekApiKey) {
        vscode.window.showErrorMessage('DeepSeek API Key is required.');
        return;
      }

      // 保存用户输入的 API Key
      await config.update('deepseekApiKey', deepseekApiKey, vscode.ConfigurationTarget.Global);
    }

    // 判断资源类型（文件或文件夹）
    const stat = fs.statSync(uri.fsPath);
    let files: string[] = [];

    if (stat.isDirectory()) {
      // 如果是文件夹，递归查找所有符合条件的文件
      files = findFilesInDirectory(uri.fsPath, SUPPORTED_EXTENSIONS, IGNORE_PATTERNS);
    } else if (stat.isFile() && SUPPORTED_EXTENSIONS.includes(path.extname(uri.fsPath))) {
      // 如果是文件且符合扩展名要求，直接添加到文件列表
      files = [uri.fsPath];
    } else {
      vscode.window.showWarningMessage('Selected resource is not a supported file or folder.');
      return;
    }

    if (files.length) {
      await vscode.window.withProgress({
        location: vscode.ProgressLocation.Notification,
        title: 'Generating Jest tests...',
        cancellable: false,
      }, async (progress) => {
        for (const file of files) {
          progress.report({ message: `Processing ${path.basename(file)}...` });
          try {
            const fileName = path.basename(file, path.extname(file));
            const code = fs.readFileSync(file, 'utf-8');
            const testCode = await callDeepSeekAPI(fileName, code, deepseekApiUrl, deepseekApiKey);

            if (testCode) {
              const testFilePath = getTestFilePath(file);
              fs.writeFileSync(testFilePath, testCode, 'utf-8');
              vscode.window.showInformationMessage(`Tests generated for ${path.basename(file)}`);
            }
          } catch (error) {
            vscode.window.showErrorMessage(`Failed to generate tests for ${path.basename(file)}: ${error}`);
          }
        }
      });
      vscode.window.showInformationMessage('Jest tests generated successfully!');
    } else {
      vscode.window.showWarningMessage('No supported files found!');
    }
  });

  context.subscriptions.push(disposable);
}

export async function callDeepSeekAPI(fileName: string, code: string, apiUrl: string, apiKey: string): Promise<string> {
  try {
    const response = await axios.post(
      apiUrl,
      JSON.stringify({
        "messages": [
          {
            "content": `
            信息1:你是一个根据传入js或者ts代码生成jest单元测试的工具；
            信息2:返回的内容只有代码、代码注释或者代码建议，以json返回，放到字段tests中；
            信息3:返回的单元测试代码中拼接引入函数的路径为'../${fileName}';
            信息4:返回的单元测试代码文件中加入一句注释“Generated By Auto-Jest-Code DeepSeek”
            `,
            "role": "system"
          },
          {
            "content": code,
            "role": "user"
          }
        ],
        "model": "deepseek-chat",
        "frequency_penalty": 0,
        "max_tokens": 2048,
        "presence_penalty": 0,
        "response_format": {
          "type": "json_object"
        },
        "stop": null,
        "stream": false,
        "stream_options": null,
        "temperature": 1,
        "top_p": 1,
        "tools": null,
        "tool_choice": "none",
        "logprobs": false,
        "top_logprobs": null
      }),
      {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
      }
    );

    const responseData = response.data;

    if (responseData.choices && responseData.choices[0] && responseData.choices[0].message) {
      const messageContent = responseData.choices[0].message.content;
      try {
        // 解析 messageContent 为 JSON
        const testsJson = JSON.parse(messageContent);

        // 提取 tests 字段
        if (testsJson.tests) {
          return testsJson.tests;
        } else {
          console.error('No tests found in the response.');
        }
      } catch (error) {
        console.error('Failed to parse message content as JSON:', error);
      }
    } else {
      throw new Error('Invalid response format: ' + responseData);
    }

    return JSON.stringify(response.data);
  } catch (error) {
    // 打印完整的错误信息
    if (axios.isAxiosError(error)) {
      console.error('Axios error details:', {
        message: error.message,
        url: error.config?.url,
        method: error.config?.method,
        data: error.config?.data,
        response: error.response?.data,
      });
    } else {
      console.error('Unexpected error:', error);
    }
    throw new Error('Failed to call DeepSeek API. Please check the URL and API Key.');
  }
}

export function findFilesInDirectory(dir: string, extensions: string[], ignoreExtensions: string[]): string[] {
  let results: string[] = [];
  const list = fs.readdirSync(dir);

  list.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat && stat.isDirectory()) {
      results = results.concat(findFilesInDirectory(filePath, extensions, ignoreExtensions));
    } else if (extensions.includes(path.extname(filePath)) && !containsPattern(filePath, ignoreExtensions)) {
      results.push(filePath);
    }
  });

  return results;
}

export function getTestFilePath(filePath: string): string {
  const dir = path.dirname(filePath);
  const fileName = path.basename(filePath, path.extname(filePath));
  const testDir = path.join(dir, '__jestTests__');

  if (!fs.existsSync(testDir)) {
    fs.mkdirSync(testDir, { recursive: true });
  }

  return path.join(testDir, `${fileName}.test.js`);
}

export function deactivate() {
  console.log('Jest Test Generator extension is now deactivated.');
}