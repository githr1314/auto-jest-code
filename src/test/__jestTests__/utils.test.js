// Generated By Auto-Jest-Code DeepSeek
import { sumArray, isPalindrome, getDeepValue, getRandomInt, uniqueArray, formatDate, delay, deepClone, isEmptyObject, toCamelCase } from '../utils.js';

describe('Utility Functions', () => {
  describe('sumArray', () => {
    it('should sum all numbers in an array', () => {
      expect(sumArray([1, 2, 3])).toBe(6);
    });
  });

  describe('isPalindrome', () => {
    it('should return true for a palindrome', () => {
      expect(isPalindrome('A man, a plan, a canal: Panama')).toBe(true);
    });
    it('should return false for a non-palindrome', () => {
      expect(isPalindrome('Hello World')).toBe(false);
    });
  });

  describe('getDeepValue', () => {
    const obj = { a: { b: { c: 1 } } };
    it('should get the deep value from an object', () => {
      expect(getDeepValue(obj, 'a.b.c')).toBe(1);
    });
    it('should return undefined for a non-existent path', () => {
      expect(getDeepValue(obj, 'a.b.d')).toBeUndefined();
    });
  });

  describe('getRandomInt', () => {
    it('should return a number within the specified range', () => {
      const min = 1, max = 10;
      const randomInt = getRandomInt(min, max);
      expect(randomInt).toBeGreaterThanOrEqual(min);
      expect(randomInt).toBeLessThanOrEqual(max);
    });
  });

  describe('uniqueArray', () => {
    it('should remove duplicates from an array', () => {
      expect(uniqueArray([1, 2, 2, 3])).toEqual([1, 2, 3]);
    });
  });

  describe('formatDate', () => {
    const date = new Date(2023, 0, 1, 13, 14, 15);
    it('should format the date according to the specified format', () => {
      expect(formatDate(date, 'YYYY-MM-DD HH:mm:ss')).toBe('2023-01-01 13:14:15');
    });
  });

  describe('delay', () => {
    it('should delay for the specified milliseconds', async () => {
      const start = Date.now();
      await delay(100);
      const end = Date.now();
      expect(end - start).toBeGreaterThanOrEqual(100);
    });
  });

  describe('deepClone', () => {
    const obj = { a: 1 };
    it('should create a deep clone of an object', () => {
      const clone = deepClone(obj);
      expect(clone).toEqual(obj);
      expect(clone).not.toBe(obj);
    });
  });

  describe('isEmptyObject', () => {
    it('should return true for an empty object', () => {
      expect(isEmptyObject({})).toBe(true);
    });
    it('should return false for a non-empty object', () => {
      expect(isEmptyObject({ a: 1 })).toBe(false);
    });
  });

  describe('toCamelCase', () => {
    it('should convert a string to camel case', () => {
      expect(toCamelCase('hello-world')).toBe('helloWorld');
    });
  });
});